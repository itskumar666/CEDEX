// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  password       String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  profile        Profile?
  orders         Order[]
  portfolioItems PortfolioItem[]
  notifications  Notification[]
  recoveryToken  String?
  mfaEnabled     Boolean   @default(false)
  mfaSecret      String?

  @@map("users")
}

model Profile {
  id         Int     @id @default(autoincrement())
  userId     Int     @unique
  firstName  String?
  lastName   String?
  phone      String?
  address    String?
  birthDate  DateTime?
  user       User    @relation(fields: [userId], references: [id])

  @@map("profiles")
}

model Order {
  id          Int      @id @default(autoincrement())
  userId      Int
  assetId     Int
  type        OrderType
  status      OrderStatus @default(PENDING)
  quantity    Float
  price       Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  asset       Asset    @relation(fields: [assetId], references: [id])

  @@map("orders")
}

model Asset {
  id           Int          @id @default(autoincrement())
  symbol       String       @unique
  name         String
  price        Float
  orders       Order[]
  portfolioItems PortfolioItem[]

  @@map("assets")
}

model PortfolioItem {
  id         Int      @id @default(autoincrement())
  userId     Int
  assetId    Int
  quantity   Float
  user       User     @relation(fields: [userId], references: [id])
  asset      Asset    @relation(fields: [assetId], references: [id])

  @@map("portfolio_items")
}

model Notification {
  id        Int       @id @default(autoincrement())
  userId    Int
  type      NotificationType
  message   String
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])

  @@map("notifications")
}

enum OrderType {
  MARKET
  LIMIT
  STOP
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
}

enum NotificationType {
  EMAIL
  SMS
}

model ApiKey {
  id        Int       @id @default(autoincrement())
  name      String
  key       String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("api_keys")
}

